setwd(dirname(getwd()))
getwd()
#Download Packages
library(tidyverse)
library(tidymodels)
library(ggplot2)
#Import Data
getwd()
client <- read_csv("project-5/predict energy behavior of prosumers/client.csv")
#Download Packages
library(tidyverse)
library(tidymodels)
library(ggplot2)
#Import Data
getwd()
client <- read_csv("project-5/predict energy behavior of prosumers/client.csv")
#Download Packages
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(lubridate)
library(winch)
#Import Data
client <- read_csv("predict energy behavior of prosumers/client.csv")
electricity_prices <- read_csv("predict energy behavior of prosumers/electricity_prices.csv")
gas_prices <- read_csv("predict energy behavior of prosumers/gas_prices.csv")
train <- read_csv("predict energy behavior of prosumers/train.csv")
forecast_weather <- read_csv("predict energy behavior of prosumers/forecast_weather.csv")
historical_weather <- read_csv("predict energy behavior of prosumers/historical_weather.csv")
weather_to_county <- read_csv("predict energy behavior of prosumers/weather_station_to_county_mapping.csv")
#Data Cleaning + Manipulation
sum(is.na(train)) #528 NA values
train_clean <- na.omit(train) #Create cleaned train w/out NA
#summary(train_clean)
# train <- train |>
#   mutate(
#     county = as.factor(county),
#     is_business = as.factor(is_business),
#     product_type = as.factor(product_type),
#     is_consumption = as.factor(is_consumption),
#     prediction_unit_id = as.factor(prediction_unit_id)
#   )
#
# head(client)
# head(electricity_prices)
# head(forecast_weather)
# head(gas_prices)
# head(historical_weather)
# head(train)
#cor(train |> select_if(is.numeric)) #Line to check correlations (UNFACTOR THE DATA TO SEE THIS)
# Histogram for target variable
ggplot(train, aes(x = target)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Distribution of Target Variable", x = "Target", y = "Frequency")
# Bar Plot for county
ggplot(train, aes(x = county)) +
geom_bar(fill = "cornflowerblue") +
theme_minimal() +
labs(title = "Frequency of Counties", x = "County", y = "Count")
# Bar Plot for is_business
ggplot(train, aes(x = is_business)) +
geom_bar(fill = "tomato") +
theme_minimal() +
labs(title = "Distribution of Business and Non-Business Prosumers", x = "Is Business", y = "Count")
# Ensure data types are correct
client$date <- as.Date(client$date)
electricity_prices$forecast_date <- as.POSIXct(electricity_prices$forecast_date, tz = "UTC")
electricity_prices$origin_date <- as.Date(electricity_prices$origin_date)
forecast_weather$origin_datetime <- as.POSIXct(forecast_weather$origin_datetime, tz = "UTC")
forecast_weather$forecast_datetime <- as.POSIXct(forecast_weather$forecast_datetime, tz = "UTC")
gas_prices$origin_date <- as.Date(gas_prices$origin_date)
gas_prices$forecast_date <- as.Date(gas_prices$forecast_date)
historical_weather$datetime <- as.POSIXct(historical_weather$datetime, tz = "UTC")
train$datetime <- as.POSIXct(train$datetime, tz = "UTC")
# str(client)
# str(electricity_prices)
# str(forecast_weather)
# str(gas_prices)
# str(historical_weather)
# str(train)
sum(unique(client$data_block_id))
sum(unique(electricity_prices$data_block_id))
sum(unique(forecast_weather$data_block_id))
sum(unique(gas_prices$data_block_id))
sum(unique(historical_weather$data_block_id))
sum(unique(train_clean$data_block_id))
#RONNIE CODE
#Merging data sets one by one
train_client <- train_clean |>
left_join(client, by = c("county", "data_block_id","is_business", "product_type" ))
train_client_gas <- train_client|>
left_join(gas_prices, by = "data_block_id")
#only able to merge this dataset using data_block_id b/c theres an unique data_block_id for each obs in the data
#connecting weather_station to historical weather
# historical_weather_county <- historical_weather |>
#   left_join(weather_station_to_county_mapping, by = c("longitude", "latitude"))
# using historical_weather_county to connect to merged data
train_client_gas_historical <- train_client_gas |>
left_join(historical_weather, by = c("datetime", "data_block_id"))
#Connecting merged data to electricity_prices
train_client_gas_historical_electric <- train_client_gas_historical |>
left_join(electricity_prices, by = c("origin_date", "forecast_date", "data_block_id"))
#connecting merged data to forecast_weather
final_combined <- train_client_gas_historical_electric |>
left_join(forecast_weather, by = c("data_block_id", "latitude", "longitude"))
# Sequential joining
# merged_data <- train |>
#   left_join(client, by = c("county", "data_block_id")) |>
#   left_join(electricity_prices, by = "data_block_id") |>
#   left_join(gas_prices, by = "data_block_id") |>
#   left_join(forecast_weather, by = "data_block_id")
train <- train |>
mutate("datetime_hour" = format(train$datetime, "%H:%M:%S"))
merged_data <- train |>
left_join(client, by = c("county", "data_block_id","is_business", "product_type")) #client datablock starts at 2, train datablock starts at 0. sort to change this otherwise NA in table!
# gas_prices2 <- gas_prices |>
#   rename(date = origin_date)
#
# electricity_prices2 <- electricity_prices |>
#   rename(date = origin_date)
# str(gas_prices2)
# str(electricity_prices2)
merged_data2 <- merged_data |>
left_join(gas_prices, by = c("data_block_id")) #added gas to train/client, , "date"
electricity_prices <- electricity_prices |>
mutate("forecast_hour" = format(electricity_prices$forecast_date, "%H:%M:%S"))
merged_data3 <- merged_data2 |>
left_join(electricity_prices, by = c("data_block_id", "datetime_hour" = "forecast_hour")) #added electricity to gas/train/client, , "date"
historical_weather_hourly <- historical_weather |>
group_by(datetime) |>
summarize(temperature_avg = mean(temperature, na.rm = TRUE),
dewpoint_avg = mean(dewpoint, na.rm = TRUE),
rain_avg = mean(rain, na.rm = TRUE),
snowfall_avg = mean(snowfall, na.rm = TRUE),
surface_pressure_avg = mean(surface_pressure, na.rm = TRUE),
cloudcover_total_avg = mean(cloudcover_total, na.rm = TRUE),
windspeed_10m_avg = mean(windspeed_10m, na.rm = TRUE),
winddirection_10m_avg = mean(winddirection_10m, na.rm = TRUE),
shortwave_radiation_avg = mean(shortwave_radiation, na.rm = TRUE),
direct_solar_radiation_avg = mean(direct_solar_radiation, na.rm = TRUE),
diffuse_radiation_avg = mean(diffuse_radiation, na.rm = TRUE))
merged_data_with_hourly_weather <- left_join(merged_data3,
historical_weather_hourly, by = "datetime")
# merged_data_with_forecast <- merged_data_with_hourly_weather %>%
#   left_join(forecast_weather, by = c("datetime" = "forecast_datetime"))
# merged_data4 <- merged_data3 |>
#   left_join(historical_weather, by = ("datetime"))
# merged_data4 <- merged_data3 |>
#   filter(data_block_id != 0)
# merged_data5 <- merged_data3 |>
#   left_join(historical_weather, by = c("data_block_id"))
#
forecast_weather_hourly <- forecast_weather |>
group_by(datetime) |>
summarize(temperature_avg = mean(temperature, na.rm = TRUE),
dewpoint_avg = mean(dewpoint, na.rm = TRUE),
snowfall_avg = mean(snowfall, na.rm = TRUE),
cloudcover_total_avg = mean(cloudcover_total, na.rm = TRUE),
u_comp_wind_10m = mean('10_metre_u_wind_component', na.rm = TRUE),
v_comp_wind_10m = mean('10_metre_v_wind_component', na.rm = TRUE),
direct_solar_radiation_avg = mean(direct_solar_radiation, na.rm = TRUE),
surface_solar_radiation_downwards_avg = mean(surface_solar_radiation_downwards, na.rm = TRUE),
total_precipitation_avg = mean(total_precipitation, na.rm = TRUE))
forecast_weather_hourly <- forecast_weather |>
group_by(forecast_datetime) |>
summarize(temperature_avg = mean(temperature, na.rm = TRUE),
dewpoint_avg = mean(dewpoint, na.rm = TRUE),
snowfall_avg = mean(snowfall, na.rm = TRUE),
cloudcover_total_avg = mean(cloudcover_total, na.rm = TRUE),
u_comp_wind_10m = mean('10_metre_u_wind_component', na.rm = TRUE),
v_comp_wind_10m = mean('10_metre_v_wind_component', na.rm = TRUE),
direct_solar_radiation_avg = mean(direct_solar_radiation, na.rm = TRUE),
surface_solar_radiation_downwards_avg = mean(surface_solar_radiation_downwards, na.rm = TRUE),
total_precipitation_avg = mean(total_precipitation, na.rm = TRUE))
forecast_weather_hourly <- forecast_weather |>
group_by(forecast_datetime) |>
summarize(temperature_avg = mean(temperature, na.rm = TRUE),
dewpoint_avg = mean(dewpoint, na.rm = TRUE),
snowfall_avg = mean(snowfall, na.rm = TRUE),
cloudcover_total_avg = mean(cloudcover_total, na.rm = TRUE),
u_comp_wind_10m = mean('10_metre_u_wind_component', na.rm = TRUE),
v_comp_wind_10m = mean('10_metre_v_wind_component', na.rm = TRUE),
direct_solar_radiation_avg = mean(direct_solar_radiation, na.rm = TRUE),
surface_solar_radiation_downwards_avg = mean(surface_solar_radiation_downwards, na.rm = TRUE),
total_precipitation_avg = mean(total_precipitation, na.rm = TRUE)) |>
ungroup()
forecast_weather_hourly <- forecast_weather |>
group_by(forecast_datetime) |>
summarize(temperature_avg = mean(temperature, na.rm = TRUE),
dewpoint_avg = mean(dewpoint, na.rm = TRUE),
snowfall_avg = mean(snowfall, na.rm = TRUE),
cloudcover_total_avg = mean(cloudcover_total, na.rm = TRUE),
u_comp_wind_10m = mean(`10_metre_u_wind_component`, na.rm = TRUE),
v_comp_wind_10m = mean(`10_metre_v_wind_component`, na.rm = TRUE),
direct_solar_radiation_avg = mean(direct_solar_radiation, na.rm = TRUE),
surface_solar_radiation_downwards_avg = mean(surface_solar_radiation_downwards, na.rm = TRUE),
total_precipitation_avg = mean(total_precipitation, na.rm = TRUE)) |>
ungroup()
View(forecast_weather_hourly)
merged_data_with_forecast <- merged_data_with_hourly_weather |>
left_join(forecast_weather_hourly, by = c("datetime" = "forecast_datetime"))
View(merged_data3)
View(merged_data2)
View(merged_data_with_forecast)
View(weather_to_county)
View(historical_weather_hourly)
View(forecast_weather)
length(unique(forecast_weather$data_block_id))
length(unique(merged_data_with_forecast$data_block_id))
# Count rows in forecast_weather
count_forecast_weather <- forecast_weather %>%
count(data_block_id)
# Count rows in merged_data_with_forecast
count_merged_data <- merged_data_with_forecast %>%
count(data_block_id)
# Compare counts
inner_join(count_forecast_weather, count_merged_data, by = "data_block_id")
# Check for NAs in key columns after merging
sum(is.na(merged_data_with_forecast$data_block_id))
sum(is.na(merged_data_with_forecast$target))
sum(is.na(merged_data_with_forecast$target))
head(merged_data_with_forecast)
summary(merged_data_with_forecast)
colnames((merged_data_with_forecast))
cor((merged_data_with_forecast))
setwd("~/Documents/School/Fall 23/DSCI 445/Final Project/project-5/Final-project-presentation-lucas")
